version: '3'

#在这里声明服务s
services:

  # 第一个容器服务,名字是web11
  web11:   # 这是服务名
    container_name: web11   # 指定容器名

    image: "web11:1.0"      # 指定dockerfile构建的镜像名

    build:
      context: ./           # dockerfile上下文, ./ 表示当前docker-compose.yml的文件位置

      dockerfile: ./Dockerfile.web11    # 相对于上下文的位置

      args:
        - oneparam="false"    # 参数如果是Boolean,必须用"Boolean"括起来才能识别,否则就是字符串
        - twoparam=19         # 可以给Dockerfile中的ARG参数传值传值

    links:                # 将Redis11容器的IP配置进web11容器的hosts文件, 包括redis11中的环境变量
      # 例如 192.168.25.25  redis11   在web11中可以ping redis11,可以使用redis11作为redis的IP
      - "redis11"

      # 同时可以指定别名,会同时添加web22以及otherwebservice
      - "web22:otherwebservice"

    ports:
      - "8080:8080"            # - 指定一个列表,进行端口映射

    depends_on:                # 指定web11的启动需要在redis11之后在启动.
      - "redis11"              # 其实就是指定启动的顺序.使用depends_on后web11一定在redis11之后启动
      - "mysql44"

    extra_hosts:                 # 在/etc/hosts中添加对应的hosts解析
      - "somehost:162.242.195.82"
      - "otherhost:50.31.209.229"     # 启动之后就会有 50.31.209.229  otherhost



  # 这是第二个容器
  web22:
    container_name: web22
    image: "web22:1.0"
    build:
      context: .
      dockerfile: ./Dockerfile.web22
    links:
      - "redis11"
      - "mysql44"
    ports:
      - "8081:8080"


  # 这是第三个容器
  redis11:
    image: "redis"
    container_name: redis11
    ports: #端口映射
      - "6379:6379"


  # 这是第四个容器
  mysql44:
    image: mysql
    container_name: mysql44
    ports:
      - 3306:3306
    volumes:
      # - /usr/local/mysql/data:/var/lib/mysql        # 使用固定的目录挂载mysql的容器的目录
      - /usr/local/mysql/conf/my.conf:/etc/mysql/my.conf
      # 使用docker的路径挂载容器目录docker volume ls和docker volume inspect 目录名查看具体位置
      - mysql-data:/var/lib/mysql

    privileged: true     # 提升容器内用户权限为真正的root权限

    environment:         # 配置环境变量
      - MYSQL_ROOT_PASSWORD=112233

# 配置数据卷,与service平级
volumes:
  mysql-data: